### Pixi
#
# specifies properties for the whole workspace
[tool.pixi.project]
channels = ["{{ config.pixi.project.channels | join('", "') }}"]
platforms = ["{{ config.pixi.project.platforms | join('", "') }}"]
preview = ["pixi-build"]

# virtual environments (each under '.pixi/envs') for specific tasks
[tool.pixi.environments]
default = { features = ["pyvercur"], solve-group = "default" }
testprev = { features = ["pyverprev", "testprev"] }
testcur = { features = ["pyvercur", "testcur"] }
build-pypi = { features = ["pyvercur", "build-pypi"], solve-group = "default" }

# specify where to download the build backend that builds conda files
[tool.pixi.package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }
channels = [
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]

# set the Python requirement for its environment
[tool.pixi.feature.pyverprev.dependencies]
python = "~={{ config.project.python.version.previous }}"
[tool.pixi.feature.pyvercur.dependencies]
python = "~={{ config.project.python.version.current }}"

# dependencies needed during build/link time that are specific to the host
# machine
[tool.pixi.package.host-dependencies]
hatchling = "==1.26.3"
python = "=={{ config.project.python.version.package_host  }}"

# dependencies for building the wheel
[tool.pixi.feature.build-pypi.dependencies]
hatchling = "==1.26.3"


## Tasks
#
# task to use hatchling to build the wheel
[tool.pixi.feature.build-pypi.tasks]
build-wheel = "python -m hatchling build -t wheel --dir $PX_DIST_DIR"

# use Python built-in unittest library for tests
[tool.pixi.feature.testprev.tasks.testprev]
args = [{ "arg" = "glob_pat" }]
env = { PYTHONPATH = "src" }
cmd = "python -m unittest discover -s tests -p '{% raw %}{{glob_pat}}{% endraw %}' -v"
[tool.pixi.feature.testcur.tasks.testcur]
args = [{ "arg" = "glob_pat" }]
env = { PYTHONPATH = "src" }
cmd = "python -m unittest discover -s tests -p '{% raw %}{{glob_pat}}{% endraw %}' -v"

# tasks that use the 'default' environment
[tool.pixi.tasks]
# build the conda distribution file
build-conda = "pixi build --output-dir $PX_DIST_DIR"
# export environment.yml
export = "pixi workspace export conda-environment"

# command-line program invocation
[tool.pixi.tasks.invoke]
args = [{ "arg" = "args", "default" = "" }]
env = { CLASS = "{{ config.project.domain }}.{{ config.project.name}}.cli", PYTHONPATH = "src" }
cmd = "\npython -c \"from $CLASS import main;print('_'*80);main('{% raw %}{{args}}{% endraw %}'.split())\""
