#!/usr/bin/env python

"""Create a document API index to the document server.

"""
__author__ = 'Paul Landes'

from typing import Dict, Any
from dataclasses import dataclass, field
import sys
import logging
import re
import json
import toml
import plac
from pathlib import Path

logger = logging.getLogger()
DEBUG = False


@dataclass
class DocMetadataAPI(object):
    """Manage the document API metadata.

    """
    meta_file: Path = field()
    pyproject_file: Path = field()
    readme_file: Path = field()

    @property
    def meta(self) -> Dict[str, Any]:
        logger.info(f'loading metadata from {self.meta_file}')
        if self.meta_file.exists():
            with open(self.meta_file) as f:
                return json.load(f)
        else:
            return {}

    @property
    def pyproject_config(self) -> Dict[str, Any]:
        with open(self.pyproject_file) as f:
            return toml.load(f)

    @property
    def readme(self) -> str:
        return self.readme_file.read_text()

    def save(self) -> Dict[str, str]:
        meta: Dict[str, Any] = self.meta
        readme_line: str = self.readme.split('\n')[0]
        conf: Dict[str, Any] = self.pyproject_config
        name: str = next(iter(conf['project']['scripts'].keys()))
        entry: Dict[str, Any] = {
            'project': name,
            'build.tag': conf['project']['version'],
            'description': conf['project']['description'],
            'short_description': re.sub(r'^#+\s*(.*)\s*$', r'\1', readme_line),
        }
        meta[name] = entry
        logger.info(f'saving metadata to {self.meta_file}')
        with open(self.meta_file, 'w') as f:
            json.dump(meta, f, indent=4)


@plac.annotations(
    meta=('the meta.json file', 'positional', None, Path),
    pyproject=('the pyproject.toml config file', 'option', 'p'),
    readme=('the README doc file', 'option', 'r'))
def main(meta: Path, pyproject: Path = Path('pyproject.toml'),
         readme: Path = Path('README.md')):
    """Create a document API index at the root of the API docroot."""
    prog = Path(sys.argv[0]).name
    logging.basicConfig(format=f'{prog}: %(message)s', level=logging.WARNING)
    try:
        meta = DocMetadataAPI(meta, pyproject, readme)
        meta.save()
    except Exception as e:
        if DEBUG:
            import traceback
            traceback.print_exc()
        logger.error(e)
        sys.exit(1)


if __name__ == '__main__':
    plac.call(main)
